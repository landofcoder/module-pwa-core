
type StoreConfig {

    lofpwa_footer_block  : String  @doc(description: "Query by lofpwa_footer_block.")
    lofpwa_footer_top_block  : String  @doc(description: "Query by lofpwa_footer_top_block.")
    lofpwa_topbar_block  : String  @doc(description: "Query by lofpwa_topbar_block.")
    lofpwa_contact_us_top_block  : String  @doc(description: "Query by lofpwa_contact_us_top_block.")
    lofpwa_contact_us_right_block  : String  @doc(description: "Query by lofpwa_contact_us_right_block.")
    lofpwa_sizechart_block  : String  @doc(description: "Query by lofpwa_sizechart_block.")
    lofpwa_show_recent_view  : String  @doc(description: "Query by lofpwa_show_recent_view.")
    lofpwa_show_related_search  : String  @doc(description: "Query by lofpwa_show_related_search.")
    lofpwa_show_hot_searchs  : String  @doc(description: "Query by lofpwa_show_hot_searchs.")
    lofpwa_category_sidebar_block : String  @doc(description: "Query by lofpwa_category_sidebar_block.")
    lofpwa_footer_bottom_block : String  @doc(description: "Query by lofpwa_footer_bottom_block.")
    lofpwa_seller_signup_top_block : String  @doc(description: "Query by lofpwa_seller_signup_top_block.")
    lofpwa_seller_signup_bottom_block : String  @doc(description: "Query by lofpwa_seller_signup_bottom_block.")
    lofpwa_about_us : String  @doc(description: "Query by lofpwa_about_us.")
    lofpwa_privacy_policy : String  @doc(description: "Query by lofpwa_privacy_policy.")
    lofpwa_return_policy : String  @doc(description: "Query by lofpwa_return_policy.")
    lofpwa_terms_and_conditions : String  @doc(description: "Query by lofpwa_terms_and_conditions.")
    lofpwa_faqs : String  @doc(description: "Query by lofpwa_faqs.")
    lofpwa_popular_search : String  @doc(description: "Query by lofpwa_popular_search.")
    lofpwa_sitemap : String  @doc(description: "Query by lofpwa_sitemap.")
    lofpwa_seller_signup_thankyou_page : String @doc(description: "Query by lofpwa_seller_signup_thankyou_page.")
    lofpwa_flashdeals_page : String @doc(description: "Query by lofpwa_flashdeals_page.")
    
    es_host : String @doc(description: "Query by es_host.")
    es_index_name_catalog_category : String @doc(description: "Query index_name by catalog_category.")
    es_index_name_catalog_product : String @doc(description: "Query index_name by catalog_product.")
    es_index_name_marketplace_seller : String @doc(description: "Query index_name by marketplace_seller.")
    es_index_name_thesaurus : String @doc(description: "Query index_name by thesaurus.")

}

type Query {

    pwaFeaturedProducts(
        filters: PwaCoreProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ): PwaCoreFeaturedProducts @resolver(class: "\\Lof\\PwaCore\\Model\\Resolver\\LofPwaCoreFeaturedProducts") @doc(description: "The products query searches for random mobile featured products that match the criteria specified in the search and filter attributes")

    pwaSuggestionTags (
        keyword: String @doc(description: "Query Search keyword."),
        store_id: String @doc(description: "Query by store_id.")
    ) : [LofSuggestionTag] @resolver( class: "Lof\\PwaCore\\Model\\Resolver\\LofSuggestionTags") @doc(description: "Query by Get suggestion tags.") @cache( cacheIdentity: "Lof\\PwaCore\\Model\\Resolver\\LofSuggestionTags\\Identity")

    pwaFeaturedTags (
        limit: Int = 10 @doc(description: "Query limit keywords."),
        store_id: String @doc(description: "Query by store_id.")
    ) : [LofSuggestionTag] @resolver( class: "Lof\\PwaCore\\Model\\Resolver\\LofFeaturedTags") @doc(description: "Query by Get Featured suggestion tags.") @cache( cacheIdentity: "Lof\\PwaCore\\Model\\Resolver\\LofSuggestionTags\\Identity")
}

input PwaCoreProductFilterInput @doc(description: "PwaCoreProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. PwaCoreProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    name: FilterTypeInput @doc(description: "The product name. Customers use this name to identify the product.")
    sku: FilterTypeInput @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer.")
    seller_id: FilterTypeInput @doc(description: "fitler by seller_id field.")
    description: FilterTypeInput @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    short_description: FilterTypeInput @doc(description: "A short description of the product. Its use depends on the theme.")
    price: FilterTypeInput @doc(description: "The price of an item.")
    special_price: FilterTypeInput @doc(description: "The discounted price of the product. Do not include the currency code.")
    special_from_date: FilterTypeInput @doc(description: "The beginning date that a product has a special price.")
    special_to_date: FilterTypeInput @doc(description: "The end date that a product has a special price.")
    weight: FilterTypeInput @doc(description: "The weight of the item, in units defined by the store.")
    manufacturer: FilterTypeInput @doc(description: "A number representing the product's manufacturer.")
    meta_title: FilterTypeInput @doc(description: "A string that is displayed in the title bar and tab of the browser and in search results lists.")
    meta_keyword: FilterTypeInput @doc(description: "A comma-separated list of keywords that are visible only to search engines.")
    meta_description: FilterTypeInput @doc(description: "A brief overview of the product for search results listings, maximum 255 characters.")
    image: FilterTypeInput @doc(description: "The relative path to the main image on the product page.")
    small_image: FilterTypeInput @doc(description: "The relative path to the small image, which is used on catalog pages.")
    thumbnail: FilterTypeInput @doc(description: "The relative path to the product's thumbnail image.")
    tier_price: FilterTypeInput @doc(description: "The price when tier pricing is in effect and the items purchased threshold has been reached.")
    news_from_date: FilterTypeInput @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product.")
    news_to_date: FilterTypeInput @doc(description: "The end date for new product listings.")
    custom_layout_update: FilterTypeInput @doc(description: "XML code that is applied as a layout update to the product page.")
    min_price: FilterTypeInput @doc(description:"The numeric minimal price of the product. Do not include the currency code.")
    max_price: FilterTypeInput @doc(description:"The numeric maximal price of the product. Do not include the currency code.")
    category_id: FilterTypeInput @doc(description: "Category ID the product belongs to.")
    options_container: FilterTypeInput @doc(description: "If the product has multiple options, determines where they appear on the product page.")
    required_options: FilterTypeInput @doc(description: "Indicates whether the product has required options.")
    has_options: FilterTypeInput @doc(description: "Indicates whether additional attributes have been created for the product.")
    image_label: FilterTypeInput @doc(description: "The label assigned to a product image.")
    small_image_label: FilterTypeInput @doc(description: "The label assigned to a product's small image.")
    thumbnail_label: FilterTypeInput @doc(description: "The label assigned to a product's thumbnail image.")
    created_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was created.")
    updated_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was updated.")
    country_of_manufacture: FilterTypeInput @doc(description: "The product's country of origin.")
    custom_layout: FilterTypeInput @doc(description: "The name of a custom layout.")
    gift_message_available: FilterTypeInput @doc(description: "Indicates whether a gift message is available.")
    or: PwaCoreProductFilterInput @doc(description: "The keyword required to perform a logical OR comparison.")
}

type PwaCoreFeaturedProducts {
    total_count: Int @doc(description: "The number of seller products returned")
    items: [ProductInterface] @doc(description: "An array of seller products that match the specified search criteria")
}

type LofSuggestionTag {
    term  : String  @doc(description: "Query by term.")
    title  : String  @doc(description: "Query by title.")
    num_of_results  : Int  @doc(description: "Query by num_of_results.")
    is_featured  : Int  @doc(description: "Query by is_featured.")
    is_hot  : Int  @doc(description: "Query by is_hot.")
}
